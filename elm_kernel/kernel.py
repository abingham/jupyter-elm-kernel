from ipykernel.kernelbase import Kernel
import os
import subprocess
import sys
from tempfile import TemporaryDirectory


class ElmKernel(Kernel):
    implementation = 'elm_kernel'
    implementation_version = '1.0'
    language = 'no-op'
    language_version = '0.1'
    language_info = {'name': 'elm',
                     'codemirror_mode': 'elm',
                     'mimetype': 'text/x-elm',
                     'file_extension': '.elm'}
    banner = "Display Elm output"

    def do_execute(self, code, silent,
                   store_history=True,
                   user_expressions=None,
                   allow_stdin=False):
        with TemporaryDirectory() as tmpdirname:
            infile = os.path.join(tmpdirname, 'input.elm')
            outfile = os.path.join(tmpdirname, 'index.js')

            with open(infile, mode='wt') as f:
                f.write(code)

            try:
                subprocess.run(
                    ['elm-make', infile, '--yes',
                     '--output={}'.format(outfile)],
                    cwd=tmpdirname,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    encoding=sys.getdefaultencoding())
            except subprocess.CalledProcessError as err:
                return self._exec_error(err)

            with open(outfile, mode='rt') as f:
                javascript = f.read()

            return self._exec_success(javascript)

    def _exec_error(self, err):
        """Called when execution of elm-make has failed.

        `err` is the `CalledProcessError` object thrown by `subprocess.run()`
        for the failed command.
        """
        self.send_response(
            self.iopub_socket,
            'display_data',
            {
                'metadata': {},
                'data': {
                    'text/html': '<pre>{}</pre>'.format(err.stdout)
                }
            }
        )

        return {
            'status': 'error',
            'execution_count': self.execution_count,
        }

    def _exec_success(self, javascript):
        """Called when elm-make has succeeded.

        `javascript` is the javascript generated by elm-make.
        """
        # TODO: pull module name from `code`
        module_name = "Main"

        div_id = 'elm-div-' + str(self.execution_count)

        template = """
            var defineElm = function(cb) {{
                if (this.Elm) {{
                    this.oldElm = this.Elm;
                }}
                var define = null;

                {js}

                cb();
            }}
            ;

            var obj = new Object();
            defineElm.bind(obj)(function(){{
                var mountNode = document.getElementById('{div_id}');
                obj.Elm. {module_name}.embed(mountNode);
            }});
        """

        javascript = template.format(
            js=javascript,
            module_name=module_name,
            div_id=div_id)

        self.send_response(
            self.iopub_socket,
            'display_data',
            {
                'metadata': {},
                'data': {
                    'text/html': '<div id="' + div_id + '"></div>'
                }
            }
        )

        self.send_response(
            self.iopub_socket,
            'display_data',
            {
                'metadata': {},
                'data': {
                    'application/javascript': javascript
                }
            })

        return {
            'status': 'ok',
            # The base class increments the execution count
            'execution_count': self.execution_count,
            'payload': [],
            'user_expressions': {},
        }


if __name__ == '__main__':
    from ipykernel.kernelapp import IPKernelApp
    IPKernelApp.launch_instance(kernel_class=ElmKernel)
